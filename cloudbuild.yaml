substitutions:
  _SERVICE_NAME: 'cart'  # Default service name if not overridden in the trigger
  _ENV_NAME: 'dev'

steps:
  # Step 1: Read the current version from version.txt
  - name: 'ubuntu'
    id: ReadVersion
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ ! -f version.txt ]; then
          echo "v1" > version.txt  # Initialize version if file does not exist
        fi
        VERSION=$(cat version.txt)
        echo "VERSION=${VERSION}" > /workspace/version.env

  # Step 2: Increment the version
  - name: 'ubuntu'
    id: IncrementVersion
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Read the current version
        current_version=$(cat version.txt)
        # Increment the version (simple example)
        new_version=$(echo "$current_version" | awk -F. -v OFS=. '{$NF++;print}')
        # Update version.txt
        echo "$new_version" > version.txt

  # Step 3: Build the Docker image using the updated version
  - name: 'gcr.io/cloud-builders/docker'
    id: Build
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        docker build -t us-east1-docker.pkg.dev/$PROJECT_ID/robot-shop-registry/${_SERVICE_NAME}-${_ENV_NAME}:${VERSION} ./${_SERVICE_NAME}

  # Step 4: Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: Push
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        docker push us-east1-docker.pkg.dev/$PROJECT_ID/robot-shop-registry/${_SERVICE_NAME}-${_ENV_NAME}:${VERSION}

options:
  logging: CLOUD_LOGGING_ONLY  # Use this logging option to avoid the error

# Optional: Specify a timeout
timeout: '1200s'  # Adjust the timeout as needed
